jenkins:
  systemMessage: "This deployment contains mail-ext and maven-plugin preinstalled\n\n"
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: ${JENKINS_ADMIN_USER}
          password: ${JENKINS_ADMIN_PASSWORD}
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "Overall/Read:anonymous"
        - "Overall/Administer:authenticated"
  clouds:
    - docker:
        name: "docker"
        dockerApi:
          dockerHost:
            uri: "unix:///var/run/docker.sock"
        templates:
          - labelString: "docker-agent"
            dockerTemplateBase:
              # TODO: pin sha256 or versions when using in production
              image: "jenkins/agent"
              mounts:
                - "type=tmpfs,destination=/run"
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
                - "type=volume,src=hello,dst=/world"
              environmentsString: |
                hello=world
                foo=bar
            remoteFs: "/home/jenkins/agent"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "10"
            retentionStrategy:
              idleMinutes: 1

credentials:
  system:
    domainCredentials:
      - credentials:
        - string:
            scope: GLOBAL
            id: "token"
            secret: "secret value"
            description: "Sonar token"

unclassified:
  sonarglobalconfiguration:                  # mandatory
    buildWrapperEnabled: true
    installations:                           # mandatory
      - name: "TEST"                         # id of the SonarQube configuration - to be used in jobs
        serverUrl: "http://url:9000"
        credentialsId: token       # id of the credentials containing sonar auth token (since 2.9 version)
        #serverAuthenticationToken: "token"   # for retrocompatibility with versions < 2.9
        mojoVersion: "mojoVersion"
        additionalProperties: "blah=blah"
        additionalAnalysisProperties: "additionalAnalysisProperties"
        triggers:
          skipScmCause: true
          skipUpstreamCause: true
          envVar: "envVar"

# tool:
#   git:
#     installations:
#       - name: git
#         home: /usr/local/bin/git

jobs:
  - script: >
      folder('python-app')
  - script: >
      pipelineJob('python-app/pr') {
        definition {
          cps {
            script("""\
              pipeline {
                agent { label 'docker-agent'}
                stages {
                  stage('pull_prep') {
                    steps {
                      checkout scmGit(
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/stavcas/sample-python-app']])
                      sh """apt-get update && apt-get install -y --no-install-recommends \
                      python3.5 \
                      python3-pip \
                      && \
                      apt-get clean && \
                      rm -rf /var/lib/apt/lists/*"""
                    }
                  }
                  stage('CodeFormat') {
                    steps {
                      echo "test"
                    }
                  }
                  stage('Lint/Stat') {
                    steps {
                      echo "test"
                    }
                  }
                  stage('SonarQube') {
                    steps {
                      echo "test"
                    }
                  }
                  stage('Build') {
                    steps {
                      echo "test"
                    }
                  }
                  stage('UT') {
                    steps {
                      echo "test"
                    }
                  }
                  stage('Container') {
                    steps {
                      echo "test"
                    }
                  }
                  stage('Blackbox') {
                    steps {
                      echo "test"
                    }
                  }
                }
              }""".stripIndent())
          }
        }
      }